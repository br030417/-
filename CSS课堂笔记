CSS————网页的美容师
CSS(Cascading Style Sheets)  层叠样式表，又称为CSS样式表、级联样式表。
CSS也是一种标记语言
CSS主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。
HTML主要做结构，显示元素内容。
CSS美化HTML，布局网页。
CSS的最大价值：由HTML专注去做结构呈现，样式交给CSS，即结构（HTML)与样式（CSS）相分离。



【语法规范】
主要有两个部分构成：选择器以及一条或多条声明
  h1   {属性:值  属性:值}
选择器    声明      声明
   1.选择器是用于指定CSS样式的HTML标签
   2.属性和属性值以“键值对”的样式出现
   3.属性和属性值之间用英文“ : ”分开


【标签选择器】
  1.分类：标签选择器 复合选择器
  2.标签选择器：
     标签名{
        属性1：属性值1；
        属性2：属性值2；
        。。。
     }
  3.作用：
  标签选择器可以吧某一类标签全部选择出来，比如所有的<div>标签
  4.优点：
  能快速为页面中同类型的标签统一设置样式
  5.缺点:
  不能差异化设置

 【类选择器】
 1. 如果想要差异化选择不同的标签，单独选择一个或者几个的话，可以使用类选择器
 2.格式：
     .类名{
        属性1：属性值1；
        。。。
     }
 3.例如：
   .red{
      color: red;
   }
   
   <div class = "red">永不失联的爱</div>
 4.口诀：
 样式点定义  结构类（class）调用  一个或多个  开发最常用
 5.不能用标签做定义名
 6.不要使用纯数字或者中文来命名，尽量使用英文字母来表示


 【多类名使用方式】
 1.在标签class属性中写多个类名。
 2.多个类名中间必须用空格分开。
 3.使用场景：
    1.可以把一些标签元素相同的样式（共同的部分）分到一个类里面。
    2.这些标签都可以调用这个公共的类，然后再调用自己独有的类。
    3.从而节省CSS代码，统一修改也非常方便。


【id 选择器】
 1.口诀：
      样式#定义，结构id调用，只能调用一次，切勿被人使用。
 2.举例：
    #red{
       color：red；
    }

<div id = "red">ok</div>
 3.一般和JavaScript一起使用。



 【通配符选择器】
 1.语法：
 *{
    属性值1：属性值2；
    ...
 }
 2.注意：
   1.通配符选择器不需要调用，自动就给所有元素使用样式
   2.特殊情况下才使用。
     as
     *{
        margin：0；
        padding：0；
     }







字体属性；

【用font-family属性来定义文本的字体系列】
例如：
p{ font-family:"微软雅黑";}
div{ font-family:Arial,"Microsoft Yahei","微软雅黑"；}
 1.各种字体之间必须使用英文状态下的逗号隔开。
 2.一般情况下，如果有空格隔开的多个单词组成的字体，加引号。
 3.尽量使动系统默认的自带字体，保证在任何和用户的浏览器中都能正确显示。
 4.最常见的几个字体：body{font-family:"Micorosoft Yahei",tahoma,'Hiragino Sans GB';}




【用font-size属性来定义文本的字体大小】
1.px（像素）大小是我们网页的最常用单位。
2.谷歌浏览器默认的字体大小为16px。
3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。
4.可以给body指定整个页面文字的大小。

 


【用 font-weight属性设置字体粗细】
变细：
font-weight:400;
font-weight:normal;(默认值)
变粗：
font-weight:700;
font-weight:bold;
实际开发时，更偏向于用数字来表示。



【用fony-style属性来设置文本的风格】
 1.格式：
    p {
       font-style: italic;
    }
 2.属性值    作用
   normal    默认值，浏览器会显示标准的字体样式（不倾斜）
   italic    浏览器会显示斜体的字体样式
 3.平时我们很少会给文字加斜体，反而要给斜体标签（em ， i）改为不倾斜字体。




 【复合代码】
 1.格式 （按照以下顺序写）
   font: font-style font-weight font-size/font-height font-family
   而实际敲出来的代码为：
   font: italic 700 16px 'Microsoft Yahei';
 2.注意：
     1.使用font属性时：必须按照上面语法格式的顺序写，不能更换顺序，并且各个属性间以空格隔开。
     2.不许需要设置的属性可以省略（取默认值），但必须保留font-size  font-family两个属性，否则font属性将不起作用。
3.



【CSS Text（文本）属性可以定义文本的外观，比如文本的颜色，对齐方式，装饰文本，文本缩进，行间距等】
1.对齐文本【text-align】
     1.格式：
         div{
            text-align: center;
         }
     2.属性值     解释
       left       左对齐（默认）
       right      右对齐
       center     居中对齐


2.装饰文本【text-decoration】
      1.格式：
      div{
         text-decoration: underline;
      }
      2.属性值         描述
        none           默认。没有装饰线（最常用）
        underline      下划线。链接a自带下划线（常用）
        overline       上划线（几乎不用）
        line-through   删除线（不常用）



3.文本缩进【text-indent】
      1.格式：
          1.div{
             text-indent: 10px;
          }
          2.div{
             text-indent: 2em;
          }
      2.注意：
      em是一个相对单位，2em就是两个文字的缩进。
      而10px是固定的大小，不因文字的大小改变而改变。


4.行间距【text-height】
      1.格式：
      p{
         line-height: 26px;
      }
      2.行间距包括上间距，文本高度和下间距。
        即一个字的最下方到下一行文字的最下方。
1.



【CSS引入方式】
1.内部样式表
    内部样式表（内嵌样式表）是写到html页面内部，是将所有的CSS代码抽取出来，单独放到一个<style>标签中。
    <style>
       div{
          color: red;
          font-size: 12px;
       }
    </style>
      注意：
      1.<style>标签理论上可以是放在HTML文档的任何地方，但一般会放在文档的<head>标签中。
      2.方便控制当前整个页面的元素样式设置。
      3.代码结构清晰，但是并没有实现结构与样式完全分离。
      4.使用内部样式表设定CSS，通常也被称为嵌入式引入，这种方式练习时常使用。

2.行内样式表
     行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式。适用于修改简单样式。
     <div style = "color: red; font-sizd: 12px;">你却爱着一个傻逼</div>
     注意：
      1.style其实就是标签的属性。
      2.在双引号中间，写法要符合CSS规范。
      3.可以控制当前的标签设置样式。
      4.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用。
      5.使用行内样式表设定CSS，通常也被称为行内式引入。

3.外部样式表
     实际开发都是外部样式表，适用于样式比较多的情况，核心是：样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用。
     引入外部样式表分为两步：
      1.新建一个后缀名为 .css的样式文件，把所有CSS代码都放入此文件中。
      2.在HTML页面中，使用<link>标签引入这个文件。
          <link rel = "stylesheet"  href = "css文件途径">

4.kong




【Emmet语法】
1.快速生成HTML结构语法
     1.生成标签 直接输入标签名  比如div然后tab键，就可以生成<div></div>
     2.如果想要生成多个相同标签 加上*就可以了 比如div*3就可以生成3个div
     3.入股有父子级的关系 就可以用>  比如ul>li即可
     4.如果有兄弟级的关系 就可以用+  比如div + p
     5.如果生成带有类名或者id名字的 直接写.demo 或者#demo 按tab键即可
     6.如果生成的div类名是有顺序的，可以用自增符号$表示  例如 .demo$*5 就会有<div class = "demo1"> 1会换成234
     7.如果想在生成的标签内部写内容可以用{}表示。  例如 div{张兴哲$}*5再按tab键

2.快速生成CSS样式语法：
   CSS基本采取简写样式即可：
   1.比如w200按tab键可以生成 width:200px;
   2.比如 lh26 按tab键可以生成 line-height:26px;         

3.快速格式化代码：
     右键格式化文档。
     写乱了之后有ctrl+s为保存，这时候会自动格式化代码。
1.



【CSS复合选择器】
 1.定义：
      在CSS中可以根据选择器的类型把选择器分为基础选择器和复合选择器，复合选择器是建立在基础选择器上，对基本选择器进行组合形成的。
 2.注意：
     1.复合选择器可以更准确、更高效的选择目标元素（标签）。
     2.复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的。
     3.常用的复合选择器包括：后代选择器、子选择器、并集选择器、为类选择器等。

【后代选择器】
    1.
        又称为包含选择器，可以选择父元素里面的子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。
    2.格式：
         元素1 元素2{样式声明}
         例如： ol li{...}
    3.注意：
         1.元素1和元素2中间用空格隔开。
         2.元素1是父级，元素2是子级，最终选择的是元素2.
         3.元素2可以是儿子，也可以是孙子等，只要是元素1的后代即可。

【子选择器】
    1.子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。
    2.语法：
      元素1>元素2{样式声明}
      例如：  div>p{...}
    3.注意：
          1.元素1和元素2中间用大于号隔开。
          2.元素1是父级，元素2是子级，最终选择的是元素2.
          3.元素2必须是亲儿子，其孙子、重孙之类都不归他管。

【并集选择器】
     1.并集选择器可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明。
     2.语法：
          元素1，元素2{样式声明}
         例如：
           ul，div{color:...;}
     3.约定的语法规范：
           我们并集选择器喜欢竖着写。
           一定要注意，最后一个选择器后面不需要加逗号。

【伪类选择器】
     1.伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加某些特殊的效果，或选择第一个，第n个元素。
       伪类选择器书写最大的特点是用冒号（：）表示，比如  ：hover、 ：first-child
       伪类选择器很多，比如有链接伪类、结构伪类等。

       【链接伪类选择器】
       a:ink                选择所有未被访问的链接
       a:visited            选择所有已被访问的标签
       a:hover              选择鼠标指针位于其上的标签
       a:active             选择活动链接（鼠标按下未弹起的链接）
         1.<style>
        a:link{
            color: #333;
            text-decoration: none;
        }
        a:visited{
            color:orange;
        }
        a:hover{
            color: paleturquoise;
        }
        a:active{
            color:green;
        }

       </style>
        2.注意：
          1.必须要按照上述四个顺序进行。
          2.记忆：LVHA  love hate。
          3.因为 a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。
          4.开发时最常用的写法是：
              a{
                 color:#333;
                 text-decoration:none;
              }        
              a:hover{
                 color:#369;
                 text-decoration: underline;
              }
      【focus伪类选择器】
       1.focus伪类选择器用选取获得焦点的表单元素。
          焦点就是光标，一般情况下<input>类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。
       2.举例：
       inout:focus {
          background-color: yellow;
          coloe: blue;
       }
       1
1




【CSS的元素显示模式】
1.【块元素】
     1.常见的块元素：<h1>~<h6>  <p>   <div>    <ul>       <ol>       <li>等，其中<div>是最典型的块元素。
     2.特点：
        1.比较霸道，自己独占一行。
        2.宽度、高度、外边距以及内边距都可以控制。
        3.宽度默认是容器（父级宽度）的100%。
        4.是一个容器及盒子，里面可以放行内或者块级元素。
     3.注意：
        1.文字类的元素内不能使用块级元素。
        2.<p>标签、<h1>~<h2>标签等主要用于存放文字，因此<p>里面不能放块级元素，特别是不能放<div>。

2.【行内元素】
     1.常见的行内元素有<a>   <strong>  <b>   <em>  <i>  <del>   <s>   <ins>  <u>   <span>等，其中<span>是最典型的行内元素。有的地方也将行内元素成为内联元素。
     2.特点：
          1.相邻行内元素在一行上，一行可以显示多个。
          2.高宽直接设置是无效的。
          3.默认宽度就是他本身内容的宽度。
          4.行内元素只能容纳文本或者其他行内元素。
     3.注意：
          1.链接里面不能再放链接。
          2.特殊情况链接<a>里面可以放块级元素，但是给<a>转化一下会计模式最安全。

3.【行内块元素】
      1.例如<img/>   <input/>   <td>等，他们同时具有块元素和行内元素的特点，则成为行内块元素。
      2.特点：
           1.和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。
           2.默认宽度就是他本身内容的宽度（行内元素的特点）。
           3.高度、行高、外边距以及内边距都可以控制（块级元素的特点）。
4.【元素显示模式转换】
     1.转换为块元素： display:block;
     2.转换为行内元素：display:inline;
     3.转换为行内块：display:inline-block;
1


【CSS的背景】
1.【背景颜色】
      background-color:颜色值;
      默认值为transparent（透明），也可以手动指定背景颜色为透明色。
2.【背景图片】  
      background-image:none/url(绝对地址或相对地址指定图像)；
3.【背景平铺】
      background-repeat: repeat/no-repeat/repeat-x/repeat-y;   
      [参数值]        [作用]
      repeat          背景图像在纵向和横向上平铺（默认的）
      no-repeat       背景图像不平铺
      repeat-x        背景图像在横向上平铺
      repeat-y        背景图像在纵向上平铺
4.【背景图片位置】
      1.参数是方位名词
            1.如果指定的两个字都是方位名词，则两个值前后顺序无关，比如left top和 top left效果一样。
            2.如果只指定了一个方位名词，另一个值省略，则第二个只默认居中对齐。
      2.参数是精确单位
            1.如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标。
            2.如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中。
      3.参数是混合单位
            1.如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标。
5.【背景图像固定（背景附着）】
      background-attachment:scroll / fixed
      scroll:背景图像是随对象内容滚动
      fixed:背景图像固定
6.【背景复合写法】
      background:背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置；
      background:transport url(image.jpg) repeat-y fixed top;
      (实际开发中，更提倡此类写法)
7.【背景颜色半透明】
      background:rgba(0,0,0,0.3);
      1.最后一个参数是alpha透明度，取值范围在0~1之间。
      2.我们习惯把0.3的0省略掉，写为background:rgba(0,0,0,.3);
      3.注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响。
1


【CSS的三大特性】
【层叠性】
   相同选择器给设置相同的样式，此时一个样式就会覆盖另一个冲突的样式，层叠性主要解决样式冲突。
   层叠性原则：
    1.样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式。
    2.样式不冲突，不会层叠。
    3.例如：
    div{
       color:red;
       font-size:18px;
    }
    div{
       color:green;
    }
    则最后为green 18px
【继承性】
   子标签会继承父标签的某些样式（子承父业）
      1.恰当地使用继承可以简化代码，降低CSS的代码。
      2.子元素可以继承父元素的样式（text-  font-  line-这些元素开头的可以继承，以及color的属性）
     【行高的继承性】
     body{
        font: 12px/1.5Microsoft Yahei;
     } 
            1.行高可以跟单位也可以不跟单位。
            2.如果子元素没有设置行高，则会继承父元素的行高为1.5。
            3.此时子元素的行高是：当前子元素的文字大小*1.5.
            4.body行高1.5 这样写法最大的优势就是子元素可以根据自己文字大小自动调整行高。
【优先级】
  [选择器]               [选择器权重]
  继承或者*              0,0,0,0
  元素选择器             0,0,0,1
  类选择器，伪类选择器    0,0,1,0
  ID选择器               0,1,0,0
  行内样式 style=""      1,0,0,0
  important              无穷大
    1.【注意点：】
         1.权重是有4组数字组成，但是并不会有进位。
         2.可以理解为类选择器永远大于元素选择器，以此类推。
         3.等级判断从左到右，如果某一位数值相同，则按断下一位数值。
         4.继承的权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都为0。
      【作用范围越大，权重越低，作用范围越小，权重越高（！important除外）】
    2.【权重叠加】
      如果是复合选择器，则会有权重叠加，需要计算权重。
         1.  div ul li      0,0,0,3
         2.  .nav ul li     0,0,1,2
         3.  a:hover        0,0,1,1
         4.  .nav a         0,0,1,1
1



【盒子模型】
【看透网页布局的本质】
网页布局过程
    1.先准备好相关的网页元素，网页元素基本都是盒子box。
    2.利用CSS设置好盒子样式，然后摆放到相应位置。
    3.往盒子里面装内容。
核心本质就是：利用CSS摆盒子。
【盒子模型组成】
      边框、  外边距、  内边距、   和实际内容。
      border  margin   padding    content
【边框】
      1.组成
          边框宽度（粗细）   、 边框样式  、  边框颜色
      2.语法
          border: border-width||border-style||border-color
      3.样式都有
          solid 实线边框    dashed 虚线边框    dotted 点线边框
      4.简写
          border-top: 1px solid red;  【没有顺序】
      5.表格的细线边框
          border-collapse属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。
          1.语法；
              border-collapse: collapse;
          2.collapse单词是合并的意思。
          3.border-collapse：collapse；表示相邻边框合并在一起。
      6.边框会影响盒子实际大小
          边框会额外增加盒子的实际大小。因此我们有两种方案解决。
          1.测量盒子实际大小的时候，不量边框。
          2.如果测量的时候包含了边框，则需要width/height减去边框宽度。
【内边距】
   边框与内容之间的距离为内边框。
    1.  属性                 作用
      padding-left        左内边距
      padding-right       右内边距
      padding-top         上内边距
      padding-bottom      下内边距
    2.不同的表达
        值的个数                        表达意思
        padding: 5px;                  1个值，上下左右都5像素
        padding: 5px 10px;             上下5，左右10
        padding: spx 10px 20px;        上5，左右10，下20
        padding: 5px 10px 20px 30px;   上5，右10，下20，左30（上右下左，顺时针）
    3.当我们给盒子指定padding值之后，发生了2件事
         1.内容和边框有了距离，添加了内边距。
         2.padding影响了盒子的实际大小。
         也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。
    4.解决方案
        如果保证盒子跟效果图大小保持一致，则让wigth/height减去多出来的内边距大小即可。
【外边距】
   盒子和盒子之间的距离
     1.margin-left   margin-right------
     2.表达和padding一样
     3.外边距典型应用
         外边距可以让块级盒子水平居中，但是必须满足两个条件：
           1.盒子必须指定了宽度（width）。
           2.盒子左右的外边距都设置为 auto。
           3.常见的三种写法。
                1.margin-left: auto; margin-right:auto;
                2.margin:auto;
                3.margin: 0 auto;
           4.例如：
               .header{
                  width: 960px;
                  margin: 0 auto;
               }
            5.注意：
               以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加text-align:center即可。
     4.外边距合并
          1.相邻块元素垂直外边距的合并：
                当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top,则他们之间的垂直间距不是两者之和，而是其中的较大者，这种现象被称为相邻块元素垂直外边距的合并。
                  解决方案
                      尽量只给一个盒子添加margin值
          2.嵌套块元素垂直外边距的塌陷
                对于两个嵌套关系（父子关系），父元素有上外边距的同时，子元素也有上外边距，此时父元素会塌陷较大的外边距值。且子元素无法相交父元素有距离
                   解决方案
                       1.可以为父元素定义上边框。
                       2.可以为父元素定义上内边距。
                       3.可以为父元素添加overflow:hidden。
      5.清除内外边距
          网页元素有很多都带有默认的内外边距，而且不同的浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。
          *{
             padding: 0;
             margin: 0;
          }
          行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了。
          注意：
            这也是我们的第一行代码。
【小知识】
    1.去掉li前面的项目符号（小圆点）
       语法：  
          list-style: none;
【圆角边框】
     （radius指半径）
     1. border-radius: 10px;
     2. border-radius: 50%;   必须是正方形，半径是宽度和高度的一半（w300 h300 br:50%）
     3. 该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角（顺时针）。
     4. br: 10px 40px=========左上和右下为10，左下和右上为40。
     5.分开写: border-top-radius   border-top-right-radius   borer-bottom-right-radius   border-bottom-left-radius
【盒子阴影】
    1.语法：
       box-shadow: h-shadow  v-shadow  blur spread color inset;
    2. 
         值             描述
         h-shadow      必需，水平阴影的位置，允许负值
         v-shadow      必需，垂直阴影的位置，允许负值
         blur          可选，模糊距离
         spread        可选，阴影尺寸
         color         可选，同CSS
         inset         可选将外部阴影（outset）改为内部阴影
    3.注意：
      1.默认为outside，但不可以写出来outside，否则阴影无效。
      2.阴影不占用盒子空间，不会影响其他盒子的排列。
      3.原本盒子没有影子，当我们鼠标经过盒子就添加阴影效果，这种效果做法：
         讲影子那一行代码放入 div:hover{}
【文字阴影】
    1.text-shadow: h-shadow v-shadow blur color
1



【浮动】
【传统网页布局的三种方式】（PC端）
      1.普通流（标准流）（文档流）
             标签按照规定好的方式排列
               1.块级元素独占一行，从上向下顺序排列
               2.行内元素按照顺序从左到右顺序排列，碰到父元素边缘则自动换行。
      2.浮动
      3.定位
[网页布局第一准则]  
     多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。
1.语法： 
    选择器{float:属性值;}
    属性值     描述
    none       元素不浮动（默认值）
    left       元素向左浮动
    right      元素向右浮动
2.特性：
     1.浮动元素会脱离标准流移动到指定位置（脱标）。
                      （浮动的盒子不再保留原先的位置）
     2.浮动的元素会一行内显示并且元素顶部对齐。
     3.浮动的元素会具有行内块元素的特性。
            1.任何元素都可以加浮动。
            2.如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动之后，它的大小根据内容来定。
            3.浮动的盒子中间是没有缝隙的，是紧挨着一起的。
            4.行内元素同理.
【常见网页布局】
      注意：
        1. 浮动和标准流的父盒子搭配。
           （先用标准的父元素排列上下位置，之后内部的子元素采取浮动排列左右位置）
        2.一个元素浮动了，理论上其余的兄弟元素也要浮动。
            （浮动的盒子只会影响浮动和字后面的标准流，不会影响前面的标准流。）
【清除浮动】
   1.原因：
        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。
        *由于浮动元素不再占用原文档流的位置，所以他会对后面的元素排版产生影响。
   2.本质：
      清除浮动元素造成的影响
      如果父盒子本身就有高度，则不需要清除浮动
      清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了。
   3.语法：
       {clear: 属性值;}   
       属性值    描述
       left      不允许左侧有浮动元素（清除左侧浮动的影响）
       right     清除右侧浮动的影响
       both      同时清除左右两侧浮动的影响

       我们实际工作中，几乎都用clear:both;
       清除浮动的策略是：闭合浮动。
   4.方法：
        1.额外标签法，也称隔墙法。
                在浮动元素末尾添加一个空的标签。例如<div style = "clear: both"></div>
                或者 后部分写<div class = "clear"></div>前面写 .clear{clear:both}  
                或者其他标签  如<br/>等。这个标签必须是【块级元素】
        2.父级添加overflow属性
               属性为：hidden auto  scroll
               缺点：无法显示出溢出的部分。
        3.父级添加after元素
             class = ".." 在..后面加上clearfix
             在<style>后面写：
             .clearfix:after{
                content: "";
                display: block;
                height: 0;
                clear: both;
                visibility: hidden;
                }
             .clearfix{
                zoom: 1;
             }
        4.父级添加双伪元素
1





【定位】
[为什么要定位]
    1.浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。
    2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。
【定位组成】
    定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。
    定位 =  定位模式 + 边偏移。
    定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。
【定位模式】
    1.   值            语义
        static       静态定位  
        relative     相对定位
        absolute     绝对定位
        fixed        固定定位
    2.通过position属性来设置。
【边偏移】
    top: 80px;    顶端偏移量，定义元素相对于其父元素上边线的距离。
    同样还有 bottom left right
【静态定位】
    1.语法： 选择器{
       position: static;
    }
    2.静态定位按照标准流特性摆放位置时，他没有边偏移。
    3.静态定位在布局是很少用到。
【相对定位】
    1.position：relative；
    2.他是相对于自己原来的位置来移动的。
    3.原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待他。（不脱标，继续保留原来的位置）
    4.相对定位没有脱标，他典型的应用是：给绝对定位当爹。
【绝对定位】
    1.position： absolute；
    2.如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document文档）。
    3.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。
    4.绝对定位不再占有原先的位置。（脱标）
【子绝父相】
       以为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位。
       当然，子绝父相不是永远不变的，如果父元素不需要占有位置，子绝父绝也会遇到。
【固定定位】
       固定定位是元素固定于浏览器可视区的位置上。主要使用场景：可以在浏览器页面滚动时元素的位置不会动
       1.语法{position： fixed；}
       2.特点：
             1.以浏览器的可视窗口为参照点移动元素。
                    跟父元素没有任何关系。
                    不随滚动条滚动。
             2.固定定位不在占有原先的位置。
                    固定定位也是脱标的，其实固定定位也可以看做一种特殊的绝对定位。
【黏性定位】
    黏性定位可以被认为是相对定位和固定定位的混合
      1.语法：
         {
            position： sticky；
            top：10px；
         }
      2.特点：
         1.以浏览器的可视窗口为参照点移动元素（固定定位的特点）
         2.黏性定位IE展由原先的位置（相对定位特点）
         3.必须加top left right bottom其中一个才有效。
【固定定位小技巧】
   1.固定在版心右侧位置。（假如说版心是800px）
      .box{
         position: fixed;
         left: 50%;
         margin-left: 400px;
      }
【脱标】
    1.脱标： 绝对定位 固定定位
    2.不脱标： 静态定位 相对定位 黏性定位
【移动位置】
    静态定位不能使用边偏移
    相对定位相对于自身位置移动
    绝对定位---带有定位的父级
    固定定位---浏览器可视区
    黏性定位---浏览器可视区
【定位叠放次序】
    {z-index：1；}
   注意： 
      1.数值可以是正整数、负整数或0，默认值是auto，数值越大，盒子越靠上。
      2.如果属性值相同，则按照书写顺序，后来居上。
      3.数字后面不能加单位。
      4.只有定位的盒子才有z-index属性。  
【定位的拓展】
    1.[绝对定位的盒子居中]
        加了绝对定位的盒子不能通过margin: 0 auto水平居中。但可以通过以下计算方法实现水平和垂直居中。
           1.left： 50%;（让盒子的左侧移动到父级元素的水平中心位置）。
           2.margin-left: -100px;让盒子向左移动自身宽度的一半。
    2.[定位特殊特性]
      绝对定位和固定定位也和浮动类似。
        1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。
        2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认带小时内容的大小。
    3.[脱标的盒子不会触发外边距塌陷]
        浮动元素、绝对定位（固定定位）元素的都不会触发外边距合并的问题。
    4.[绝对定位（固定定位）会完全压住盒子]
         1.浮动元素不同，只会压住他下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（或图片）。
         2.但是绝对定位（固定定位）会压住下面标准流所有的内容。
         3.浮动之所以不会压住文字，因为浮动产生的最初目的是为了做文字环绕效果的，文字会围绕浮动元素。
！！！！！！【注意：如果一个盒子既有left属性，也有right属性，则默认会执行left属性 top bottom则会执行top】













































































      


                

    













  























        









































































































